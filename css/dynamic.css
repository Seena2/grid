
/* styling for elements in dynamic-grid.html*/
.dynamic-grid{
    resize: both;
    overflow: auto;
    display: grid;
    gap: 4px;
    padding: 4px;
    border: 1px solid gray;
    background-color: skyblue;
    /*
    grid-template-rows: 150px 650px;
    grid-template-columns: 150px 150px 150px 150px 150px;
    */
    /*the above static grid track can be rewritten
    using css "repeat()" function as follows*/
    /*
    grid-template-rows: repeat(2,150px);
    grid-template-columns: repeat(5,150px);
    */
    /* we also can make it dynamically take available space
     by taking fraction of available space */
     /*
    grid-template-rows: repeat(2,1fr);
    grid-template-columns: repeat(5,1fr); 
    */
    /* it's possible to disproportionaly distribute available space among items*/
   /*
    grid-template-rows: repeat(2,1fr);
    grid-template-columns: repeat(2,2fr) repeat(3,1fr);
    */
    /* Dynamically define the max and min size of tracks for responsiveness*/
    /*
    grid-template-rows: repeat(2,min(200px, 50%));
    grid-template-columns: repeat(5,max(120px,15%));
    */
    /* using minmax */
    /*
    grid-template-rows: repeat(2,1fr);
    grid-template-columns: repeat(5,minmax(150px,200px));
    */
    /* using clamp to define range of sizes*/
    grid-template-rows: repeat(2,1fr);
    grid-template-columns: repeat(5,clamp(150px,20%,200px));
}
.grid.item{
    background-color: #444;
    text-align: center;
    color: #ddd;
    font-family: sans-serif;
    font-size: 1.5rem;
    padding: 12px;
}
p{
    margin: 12px auto 24px;
}
img{
    height: 60px;
}
